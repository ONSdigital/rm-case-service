<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:int="http://www.springframework.org/schema/integration"
       xmlns:int-jms="http://www.springframework.org/schema/integration/jms"
       xmlns:int-xml="http://www.springframework.org/schema/integration/xml"
       xmlns:int-file="http://www.springframework.org/schema/integration/file"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
  http://www.springframework.org/schema/beans/spring-beans-4.2.xsd
  http://www.springframework.org/schema/integration http://www.springframework.org/schema/integration/spring-integration.xsd
  http://www.springframework.org/schema/integration/jms http://www.springframework.org/schema/integration/jms/spring-integration-jms.xsd
  http://www.springframework.org/schema/integration/file
  http://www.springframework.org/schema/integration/file/spring-integration-file.xsd
  http://www.springframework.org/schema/integration/xml
  http://www.springframework.org/schema/integration/xml/spring-integration-xml.xsd">

    <!--  First the inbound flow -->

    <!-- The inbound message container config - the inbound queue is defined here
    We will listen for caseReceipts coming from the SDX Gateway.
    -->
    <bean id="caseReceiptMessageListenerContainer"
          class="org.springframework.jms.listener.DefaultMessageListenerContainer">
        <property name="connectionFactory" ref="connectionFactory" />
        <property name="destinationName" value="Case.Responses" />
        <property name="maxConcurrentConsumers" value="1" />
        <property name="concurrentConsumers" value="1" />
        <property name="receiveTimeout" value="5000" />
        <property name="recoveryInterval" value="60000" />
        <property name="autoStartup" value="true" />
    </bean>

    <!-- need an input channel defined for MQ adapter to input to -->
    <int:channel id="caseReceiptXml" />

    <!-- anything sent to this channel is put on the queue Case.InvalidCaseReceipts -->
    <int:channel id="caseReceiptXmlInvalid" />
    <bean id="invalidCaseReceiptQueue" class="org.apache.activemq.command.ActiveMQQueue">
        <constructor-arg value="Case.InvalidCaseReceipts"/>
    </bean>
    <int-jms:outbound-channel-adapter id="invalidCaseReceiptJmsOut" destination="invalidCaseReceiptQueue" channel="caseReceiptXmlInvalid"/>

    <!-- the MQ channel adapter reads from the Case.Responses Queue (see the container above) and inputs to caseReceiptXml -->
    <int-jms:message-driven-channel-adapter
            id="jmsIn" container="caseReceiptMessageListenerContainer" channel="caseReceiptXml" />

    <!-- First the SI message provided by the channel adapter is validated against the inbound schema -->
    <!-- Option to be used in Debug/Test: throw-exception-on-rejection="true" -->
    <int-xml:validating-filter id="caseReceiptValidator" input-channel="caseReceiptXml"
                               output-channel="caseReceiptXmlValid" schema-location="classpath:xsd/caseReceipt.xsd" discard-channel="caseReceiptXmlInvalid"/>

    <!-- Secondly the now validated xml is transformed into the jaxb generated object model -->
    <int:channel id="caseReceiptTransformed" datatype="uk.gov.ons.ctp.response.casesvc.message.feedback.CaseReceipt">
        <int:queue capacity="60"/>
    </int:channel>
    <int-xml:unmarshalling-transformer
            input-channel="caseReceiptXmlValid" output-channel="caseReceiptTransformed"
            unmarshaller="caseReceiptUnmarshaller" />

    <!-- The transformer uses this unmarshaller to do the heavy (un)lifting -->
    <bean id="caseReceiptUnmarshaller" class="org.springframework.oxm.jaxb.Jaxb2Marshaller">
        <property name="contextPath" value="uk.gov.ons.ctp.response.casesvc.message.feedback" />
    </bean>

    <!-- we add an error channel so we can reprocess CaseReceipts when createCaseEvent (in CaseReceiptReceiverImpl)
    throws an exception (the IAC service is down, etc.) -->
    <int:channel id="caseReceiptProcessError" />
    <bean id="caseReceiptProcessErrorQueue" class="org.apache.activemq.command.ActiveMQQueue">
        <constructor-arg value="Case.CaseReceiptProcessErrors"/>
    </bean>
    <int-jms:outbound-channel-adapter id="caseReceiptPollerErrorJmsOut" destination="caseReceiptProcessErrorQueue" channel="caseReceiptProcessError"/>
    <int:channel id="caseReceiptTransformedWithHeader" datatype="uk.gov.ons.ctp.response.casesvc.message.feedback.CaseReceipt">
        <int:queue capacity="60"/>
    </int:channel>
    <int:header-enricher input-channel="caseReceiptTransformed" output-channel="caseReceiptTransformedWithHeader">
        <int:error-channel value="caseReceiptProcessError"/>
    </int:header-enricher>

    <int:channel id="caseReceiptPollerError" />
    <bean id="caseReceiptPollerErrorQueue" class="org.apache.activemq.command.ActiveMQQueue">
        <constructor-arg value="Case.CaseReceiptPollerErrors"/>
    </bean>
    <int-jms:outbound-channel-adapter id="caseReceiptPollerErrorJmsOut" destination="caseReceiptPollerErrorQueue" channel="caseReceiptPollerError"/>
    <int:poller id="defaultPoller" default="true" error-channel="caseReceiptPollerError" fixed-delay="5000" time-unit="MILLISECONDS" max-messages-per-poll="1" receive-timeout="5000" />
    <!-- Finally see the @ServiceActivator(inputChannel="caseReceiptTransformedWithHeader") -->

    <!-- Invalid notification XML written to file -->
    <int:channel id="caseNotificationXmlInvalid" />
    <int-file:outbound-channel-adapter 
      directory ="file:${deadxml.directory}/notification" 
      channel="caseNotificationXmlInvalid"/>

    <!-- setup the case notification jms queue -->
    <bean id="caseNotificationJMSQueue" class="org.apache.activemq.command.ActiveMQQueue">
      <constructor-arg value="Case.Notifications"/>
    </bean>

    <int:annotation-config/>
    <!--  setup the channels - note each queue needs a channel -->
    <int:channel id="caseNotificationOutbound" />
    <int:channel id="caseNotificationXml" />
    <int:channel id="caseNotification" />

    <!--  the @Publisher sends to the marshalling-transformers input channel -->
    <int-xml:marshalling-transformer
      input-channel="caseNotificationOutbound" 
      output-channel="caseNotificationXml"
      marshaller="caseNotificationMarshaller"
      result-transformer="caseNotificationTransformer"/>

    <!--  the caseNotificationMarshaller turns java objects into xml dom -->
    <bean id="caseNotificationMarshaller" class="org.springframework.oxm.jaxb.Jaxb2Marshaller">
        <property name="contextPath" value="uk.gov.ons.ctp.response.casesvc.message.notification" />
    </bean>

    <!--  the caseNotificationTransformer turns the xml dom into a string -->
    <bean id="caseNotificationTransformer" class="org.springframework.integration.xml.transformer.ResultToStringTransformer" />

    <!-- validate XML against schema -->
    <int-xml:validating-filter id="caseNotificationValidator"
      input-channel="caseNotificationXml" 
      output-channel="caseNotification"
      schema-location="classpath:xsd/caseNotification.xsd"
      discard-channel="caseNotificationXmlInvalid"/>

    <!--  adapt the SI message to a JMS message -->
    <int-jms:outbound-channel-adapter id="jmsout" channel="caseNotification" destination="caseNotificationJMSQueue"/>
</beans>

