<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:int="http://www.springframework.org/schema/integration"
       xmlns:int-jms="http://www.springframework.org/schema/integration/jms"
       xmlns:int-xml="http://www.springframework.org/schema/integration/xml"
       xmlns:int-file="http://www.springframework.org/schema/integration/file"
       xmlns:int-sftp="http://www.springframework.org/schema/integration/sftp"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
  http://www.springframework.org/schema/beans/spring-beans-4.2.xsd
  http://www.springframework.org/schema/integration http://www.springframework.org/schema/integration/spring-integration.xsd
  http://www.springframework.org/schema/integration/jms http://www.springframework.org/schema/integration/jms/spring-integration-jms.xsd
  http://www.springframework.org/schema/integration/file
  http://www.springframework.org/schema/integration/file/spring-integration-file.xsd
  http://www.springframework.org/schema/integration/xml
  http://www.springframework.org/schema/integration/xml/spring-integration-xml.xsd
  http://www.springframework.org/schema/integration/sftp
  http://www.springframework.org/schema/integration/sftp/spring-integration-sftp.xsd">

    <!-- ** START of Inbound flow of ActionRequests from queue ** -->
    
    <!-- Invalid instruction XML written to file-->
    <int:channel id="instructionXmlInvalid" />
    <int-file:outbound-channel-adapter
      directory="file:${deadxml.directory}/instruction"
      channel="instructionXmlInvalid" />

    <!--  Adapt the JMS message to an incoming SI message -->
    <int-jms:message-driven-channel-adapter
      id="jmsIn" container="instructionListenerContainer" channel="instructionXml" />

    <!-- validate XML against schema -->
    <int-xml:validating-filter id="instructionValidator"
      input-channel="instructionXml" output-channel="instructionXmlValid"
      schema-location="classpath:xsd/actionInstruction.xsd" discard-channel="instructionXmlInvalid" />

    <!-- Validated xml is transformed into the jaxb generated object model -->
    <int:channel id="instructionTransformed" />
    <int-xml:unmarshalling-transformer
      input-channel="instructionXmlValid" output-channel="instructionTransformed"
      unmarshaller="instructionUnmarshaller" />

    <!-- The transformer uses this unmarshaller to do the heavy (un)lifting -->
     <bean id="instructionUnmarshaller" class="org.springframework.oxm.jaxb.Jaxb2Marshaller">
     <property name="contextPath"
       value="uk.gov.ons.ctp.response.action.message.instruction" />
    </bean>

    <!-- ** END of inbound flow of ActionRequests from queue ** -->
    <!-- ** START of Outbound flow of transformed ActionRequests to external service ** -->

    <bean id="sftpSessionFactory" class="org.springframework.integration.file.remote.session.CachingSessionFactory">
      <constructor-arg ref="defaultSftpSessionFactory" />
      <constructor-arg value="1"/>
      <property name="sessionWaitTimeout" value="5000"/>
    </bean>

    <bean id="defaultSftpSessionFactory" class="org.springframework.integration.sftp.session.DefaultSftpSessionFactory">
      <property name="host" value="${sftp.host}"/>
      <property name="port" value="${sftp.port}"/>
      <property name="user" value="${sftp.username}"/>
      <property name="password" value="${sftp.password}"/>
      <property name="allowUnknownKeys" value="true"/>
	</bean>

	<int:channel id="sftpOutbound"/>

    <int-sftp:outbound-channel-adapter id="sftpOutboundAdapter"
      session-factory="sftpSessionFactory"
      channel="sftpOutbound"
      remote-filename-generator-expression="headers[#{T(org.springframework.integration.file.FileHeaders).REMOTE_FILE}]"
      remote-directory="${sftp.directory}">
      <int-sftp:request-handler-advice-chain>
        <bean class="org.springframework.integration.handler.advice.ExpressionEvaluatingRequestHandlerAdvice">
          <property name="onSuccessExpression" value="#root" />
          <property name="successChannel" ref="sftpSuccessProcess" />
          <property name="onFailureExpression" value="#root" />
          <property name="failureChannel" ref="sftpFailedProcess" />
        </bean>
        <int:retry-advice>
          <int:exponential-back-off initial="2000" multiplier="2" />
        </int:retry-advice>
      </int-sftp:request-handler-advice-chain>
	</int-sftp:outbound-channel-adapter>

    <!-- Please see SftpServicePublisher implementation -->
	<int:channel id="sftpSuccessProcess"/>
	<int:channel id="sftpFailedProcess"/>

   <!-- ** END of outbound flow of transformed ActionRequests ** -->
   <!-- ** START of section to publish ActionFeedbacks  ** -->

    <int:channel id="actionFeedbackXmlInvalid" />
    <bean id="invalidActionFeedbackQueue" class="org.apache.activemq.command.ActiveMQQueue">
        <constructor-arg value="Action.InvalidActionFeedback"/>
    </bean>
    <int-jms:outbound-channel-adapter id="invalidActionFeedbackJmsOut" destination="invalidActionFeedbackQueue" channel="actionFeedbackXmlInvalid"/>

    <bean id="actionFeedbackQueue" class="org.apache.activemq.command.ActiveMQQueue">
        <constructor-arg value="Action.Notifications"/>
    </bean>

    <int:annotation-config/>
    <!--  setup the outbound channels - note each queue needs a channel -->
    <int:channel id="actionFeedbackOutbound" />
    <int:channel id="actionFeedbackXml" />
    <int:channel id="actionFeedback" />

    <!--  the @Publisher sends to the marshalling-transformers input channel -->
    <int-xml:marshalling-transformer
            input-channel="actionFeedbackOutbound"
            output-channel="actionFeedbackXml"
            marshaller="actionFeedbackMarshaller"
            result-transformer="actionFeedbackTransformer"/>

    <!--  the actionFeedbackMarshaller turns java objects into xml dom -->
    <bean id="actionFeedbackMarshaller" class="org.springframework.oxm.jaxb.Jaxb2Marshaller">
        <property name="contextPath" value="uk.gov.ons.ctp.response.action.message.feedback" />
    </bean>

    <!--  the actionFeedbackTransformer turns the xml dom into a string -->
    <bean id="actionFeedbackTransformer" class="org.springframework.integration.xml.transformer.ResultToStringTransformer" />

    <!-- validate XML against schema -->
    <!-- Option to be used in Debug/Test: throw-exception-on-rejection="true" -->
    <int-xml:validating-filter id="actionFeedbackValidator"
      input-channel="actionFeedbackXml"
      output-channel="actionFeedback"
      schema-location="classpath:xsd/actionFeedback.xsd"
      discard-channel="actionFeedbackXmlInvalid"/>

    <!--  adapt the SI message to a JMS message -->
    <int-jms:outbound-channel-adapter id="actionFeedbackJmsout" channel="actionFeedback" destination="actionFeedbackQueue"/>
    <!-- END of section to publish ActionFeedbacks  -->

</beans>
